package br.com.body.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.body.entidade.Aluno;

/**
 * Classe responsável por cadastrar, excluir, alterar e mostrar os dados de alunos através
 * de uma connexão com o banco de dados.
 * 
 * @author Grupo PCS-SGBD 2017.1
 *
 */
public class AlunoDAO {
	
	private Connection conexao = Conexao.getConnection();
	
	/**
	 * Método que cadastra um aluno no banco de dados.
	 */
	public void cadastroAluno(Aluno aluno) {
		
		String sql = "INSERT INTO aluno (nome,cpf,matricula,email,datamatricula) VALUES (?,?,?,?,?)";
		
		try {
			PreparedStatement preparador = conexao.prepareStatement(sql);
			
			preparador.setString(1, aluno.getNome());
			preparador.setString(2, aluno.getCpf());
			preparador.setString(3, aluno.getMatricula());
			preparador.setString(4, aluno.getEmail());
			preparador.setDate(5, aluno.getDataMatricula());
			
			preparador.execute();
			preparador.close();
			
			System.out.println("Aluno cadastrado com sucesso!");
		} catch (SQLException e) {
			System.out.println("Erro - " + e.getMessage());
		}
		
	}
	
	/**
	 * Método que altera o cadastro de um aluno no banco de dados.
	 */
	public void alteraCadastroAluno(Aluno aluno) {
		
		String sql = "UPDATE aluno SET nome = ?, email = ? WHERE matricula = ?";
		
		try {
			PreparedStatement preparador = conexao.prepareStatement(sql);
			
			preparador.setString(1, aluno.getNome());
			preparador.setString(2, aluno.getEmail());
			preparador.setString(3, aluno.getMatricula());
			
			preparador.execute();
			preparador.close();
			
			System.out.println("Cadastro alterado com sucesso!");
		} catch (SQLException e) {
			System.out.println("Erro - " + e.getMessage());
		}
		
	}
	
	/**
	 * Método que deleta o cadastro de um aluno do banco de dados.
	 */
	public void deletaCadastroAluno(Aluno aluno) {
		
		String sql = "DELETE FROM aluno WHERE matricula = ?";
		
		try {
			PreparedStatement preparador = conexao.prepareStatement(sql);
			
			preparador.setString(1, aluno.getMatricula());
			
			
			preparador.execute();
			preparador.close();
			
			System.out.println("Cadastro deletado com sucesso!");
		} catch (SQLException e) {
			System.out.println("Erro - " + e.getMessage());
		}
		
	}
	
	/**
	 * Método que retorna uma lista com os alunos cadastrados no banco de dados.
	 */
	public List<Aluno> buscaListaAlunos(Aluno aluno) {
		
		String sql = "SELECT * FROM aluno";
		List<Aluno> listaAlunos = new ArrayList<>();
		
		try {
			PreparedStatement preparador = conexao.prepareStatement(sql);
			ResultSet resultados = preparador.executeQuery();
			
			while(resultados.next()) {
				Aluno alu = new Aluno();
				alu.setId(resultados.getInt("id"));
				alu.setNome(resultados.getString("nome"));
				alu.setCpf(resultados.getString("cpf"));
				alu.setMatricula(resultados.getString("matricula"));
				alu.setEmail(resultados.getString("email"));
				alu.setDataMatricula(resultados.getDate("datamatricula"));
				
				listaAlunos.add(alu);
				
			}
		} catch (SQLException e) {
			System.out.println("Erro - " + e.getMessage());
		}
		
		return listaAlunos;
		
	}
	
	/**
	 * Método que retorna um aluno a partir de sua matrícula.
	 */
	public Aluno buscaAluno(String matricula) {
		Aluno aluno = null;
		String sql = "SELECT * FROM aluno WHERE matricula = ?";
		
		try {
			PreparedStatement preparador = conexao.prepareStatement(sql);
			preparador.setString(1, matricula);
			
			ResultSet resultado = preparador.executeQuery();
			if(resultado.next()) {
				aluno = new Aluno();
				aluno.setId(resultado.getInt("id"));
				aluno.setNome(resultado.getString("nome"));
				aluno.setCpf(resultado.getString("cpf"));
				aluno.setMatricula(resultado.getString("matricula"));
				aluno.setEmail(resultado.getString("email"));
			}
			System.out.println("Aluno encontrado com sucesso!");
		} catch (SQLException e) {
			System.out.println("Erro - " + e.getMessage());
		}
		
		return aluno;
	}
	
	public void calculaMensalidade(Aluno aluno) {
		
		String sql = "INSERT INTO aluno (valor_mensalidade) VALUES (?)";
		
		try {
			PreparedStatement preparador = conexao.prepareStatement(sql);
			
			preparador.setDouble(1, aluno.calculaValorMensalidade(aluno));
			
			preparador.execute();
			preparador.close();
			
			System.out.println("Mensalidade atualizada com sucesso!");
		} catch (SQLException e) {
			System.out.println("Erro - " + e.getMessage());
		}
		
	} 
	
}
